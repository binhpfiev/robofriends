{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","intialState","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5bdd7a5a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ( {robots}) => {\r\n    return (\r\n        <div>\r\n        {robots.map((user, i) => {\r\n        return <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}\r\n        />\r\n\r\n    })}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className = 'pa4 ba b--green bg-lightest-blue'\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n        { props.children }\r\n    </div>\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n        //console.log(this.props.store.getState())\r\n        /*\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(res => \r\n            res.json()).then(users =>\r\n            this.setState({ robots: users })\r\n        )*/\r\n    }\r\n\r\n    //onSearchChange = (event) => {\r\n    //    this.setState({ searchField: event.target.value})\r\n    //    console.log(event.target.value)\r\n    //}\r\n    render() {\r\n        //const { robots } = this.state;\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ? <h1>Loading</h1>\r\n            : <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>  \r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>;\r\n\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from'./constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS } from'./constants'\r\n\r\nconst intialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = intialState, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign( {}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload , isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload , isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleWare from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers'\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger))\n\nReactDOM.render(\n<div><Provider store={store}>\n<App />\n</Provider>\n  </div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}